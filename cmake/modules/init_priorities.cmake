# Copyright (c) 2024, Tomasz Bursztyka
#
# SPDX-License-Identifier: Apache-2.0

include_guard(GLOBAL)
include(boards)

function(zephyr_add_service service_file)
  set(service_full_path ${CMAKE_CURRENT_SOURCE_DIR}/${service_file})
  set_property(TARGET zephyr_interface APPEND PROPERTY ZEPHYR_SERVICE_FILES ${service_full_path})
endfunction()

function(zephyr_add_service_ifdef feature_toggle service_file)
  if(${${feature_toggle}})
    zephyr_add_service(${service_file})
  endif()
endfunction()

function(zephyr_add_device_init dev_init_file)
  set(dev_init_full_path ${CMAKE_CURRENT_SOURCE_DIR}/${dev_init_file})
  set_property(TARGET zephyr_interface APPEND PROPERTY ZEPHYR_DEVICE_INIT_FILES ${dev_init_full_path})
endfunction()

function(zephyr_add_device_init_ifdef feature_toggle dev_init_file)
  if(${${feature_toggle}})
    zephyr_add_device_init(${dev_init_file})
  endif()
endfunction()

function(zephyr_generate_init_priorities)
  if(NOT (ARGC EQUAL 0))
    messasge(FATAL_ERROR "zephyr_generate_init_priorities takes no arguments")
  endif()

  # The directory containing gen_init_priorities.py script and files.
  set(GIP_BASE     ${ZEPHYR_BASE}/scripts/gen_init_priorities)

  # gen_init_priorities script that will generate a header about soft/hard
  # init nodes priority and - whene relevant - levels too.
  set(GIP_SCRIPT   ${GIP_BASE}/gen_init_priorities.py)

  # The edtlib.EDT object in pickle format.
  set(EDT_PICKLE        ${PROJECT_BINARY_DIR}/edt.pickle)

  # The .config file generated by Kconfig
  set(DOTCONFIG         ${PROJECT_BINARY_DIR}/.config)

  # The generated C header needed by <zephyr/init.h>
  set(GIP_INIT_H   ${BINARY_DIR_INCLUDE_GENERATED}/zinit.h)

  set(init_files)
  # Recovering services files, if any
  get_property(service_files TARGET zephyr_interface PROPERTY ZEPHYR_SERVICE_FILES)
  if (NOT (service_files EQUAL 0))
    list(APPEND init_files ${service_files})
  endif()

  # Recovering device init files, if any
  get_property(dev_init_files TARGET zephyr_interface PROPERTY ZEPHYR_DEVICE_INIT_FILES)
  if (NOT (dev_init_files EQUAL 0))
    list(APPEND init_files ${dev_init_files})
  endif()

  # Recovering application overlays
  zephyr_build_string(board_string SHORT shortened_board_string
                      BOARD ${BOARD} BOARD_QUALIFIERS ${BOARD_QUALIFIERS}
    )

  set(gip_board_strings
     ${board_string}
     ${shortened_board_string}
    )

  foreach(str ${gip_board_strings})
    if (EXISTS ${APPLICATION_CONFIG_DIR}/boards/${str}_service_and_device_init.yaml)
      list(APPEND init_files ${APPLICATION_CONFIG_DIR}/boards/${str}_service_and_device_init.yaml)
    endif()
  endforeach()

  if (EXISTS ${APPLICATION_CONFIG_DIR}/service_and_device_init.yaml)
    list(APPEND init_files ${APPLICATION_CONFIG_DIR}/service_and_device_init.yaml)
  endif()

  set(INIT_OPT)
  list(LENGTH init_files found_init_files)
  if (NOT (found_init_files EQUAL 0))
    message(STATUS "Found initialization object files: ${init_files}")
    list(APPEND INIT_OPT --init-files ${init_files})
  endif()

  #
  # Run GIP_SCRIPT
  #
  execute_process(
    COMMAND ${PYTHON_EXECUTABLE} ${GIP_SCRIPT}
    --dotconfig-file ${DOTCONFIG}
    --edt-pickle ${EDT_PICKLE}
    ${INIT_OPT}
    --header-out ${GIP_INIT_H}
    OUTPUT_QUIET # Discard stdout
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    RESULT_VARIABLE ret
  )

  if(NOT "${ret}" STREQUAL "0")
    message(FATAL_ERROR "command failed with return code: ${ret}")
  else()
    message(STATUS "Generated initialization header file ${GIP_INIT_H}")
  endif()
endfunction()
